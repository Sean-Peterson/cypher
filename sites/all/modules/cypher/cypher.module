<?php
function cypher_menu() {
    $items['cypher'] = array(
        'title' => 'Cypher',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('cypher_form'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['cypher_results'] = array(
        'title' => "Can you decypher the code?",
        'page callback' => 'cypher_result',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function cypher_form(){
    $form['shift']=array(
        '#title'=>'A number, please',
        '#type'=>'textfield',
        '#description'=>t('This number will be used to encrypt your word'),
        '#required'=>TRUE,
        '#element_validate'=>array(
            'element_validate_integer_positive',
        ),
    );
    $form['direction']=array(
        '#title'=>'Specify RIGHT or LEFT, please',
        '#type'=>'textfield',
        '#description'=>t('The direction will be used to encrypt your word'),
        '#required'=>TRUE,
        '#element_validate'=>array(
            'element_validate_direction',
        ),
    );
    $form['word']=array(
        '#title'=>'Input a word for encryption',
        '#type'=>'textfield',
        '#description'=>t('This word will be encrypted with the information you provided'),
        '#required'=>TRUE,
    );
    $form['submit']=array(
        '#type'=>'submit',
        '#value'=>'Submit',
    );
    return $form;
}

function element_validate_direction($element) {
    if(strtolower($element['#value']) !=='right' && strtolower($element['#value'])!=='left'){
        form_error($element, t('Direction must be either right or left'));
    }
}

function cypher_form_submit($form, &$form_state) {
    $shift=$form_state['values']['shift'];
    $direction=$form_state['values']['direction'];
    $word=$form_state['values']['word'];
    $_SESSION['shift']=$shift;
    $_SESSION['direction']=$direction;
    $_SESSION['word']=$word;

    $form_state['redirect'] = 'cypher_results';
}

function cypher_result() {
    echo'<pre>';
    $something = '<h1>Here</h1>';
    var_dump($_SESSION['shift']);
    var_dump($_SESSION['direction']);
    var_dump($_SESSION['word']);
    var_dump(str_split($_SESSION['word']));
    $shift=($_SESSION['shift']);
    $direction=strtolower($_SESSION['direction']);
    $word=($_SESSION['word']);
    $split_word=str_split($word);
    $alphabet=range('a','z');
    var_dump($shift);
    var_dump($direction);
    var_dump($word);
    var_dump($split_word);
    echo'</pre>';
    while($shift>25){
        $shift = $shift-26;
    }
    foreach ($split_word as &$value) {
        $alph_spot = array_search($value,$alphabet);
        var_dump($alph_spot);
        if(isset($alph_spot)){
            if ($direction == 'right') {
                if (($alph_spot+$shift)>25) {
                    $right_shift = ($alph_spot+$shift)-26;
                    $value=$alphabet[$right_shift];
                }else{
                    $value=$alphabet[$alph_spot+$shift];
                }
            }elseif ($direction == 'left'){
                if ($alph_spot-$shift<0) {
                    $left_shift = ($alph_spot-$shift)+26;
                    $value=$alphabet[$left_shift];
                }else{
                    $value=$alphabet[$alph_spot-$shift];
                }
            }
        }
    }
    echo'<pre>';
    var_dump($split_word);
    echo'</pre>';
    return $something;
}
